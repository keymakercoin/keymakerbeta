name: Keymaker Build Linux64
on:
  push:
    branches:
      - master
      - develop
      - "ft/*"
      - "bug/*"
      - "release/*"
  pull_request:
    branches:
      - develop
  workflow_dispatch:

env:
  COIN_NAME: keymaker
  BUILD_DIR: keymaker-build
  COMPRESS_DIR: keymaker-compress
  TEST_DIR: keymaker-test

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Triggered By
        run: |
          echo "checking out $GITHUB_REF triggered by $GITHUB_EVENT_NAME"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Read versions
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: "release-version candidate-version snapshot-version"

      - name: Choose version
        id: selected-version
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]] || [[ "$GITHUB_REF" == *ft/* ]] || [[ "$GITHUB_REF" == *bug/* ]]; then
              version=${{ steps.versions.outputs.snapshot-version }}
          elif [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] && [[ "$GITHUB_REF" == *"release/"* ]]; then
              version=${{ steps.versions.outputs.candidate-version }}
          elif [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] && [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
              version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version is: [$version]"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: version.txt

    outputs:
      version: ${{ steps.selected-version.outputs.version }}

  build-ubuntu20:
    name: Ubuntu 20 Build
    needs: get-version
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get install curl libcurl4-openssl-dev build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake -y
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          gcc --version
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j$(nproc)  HOST=x86_64-pc-linux-gnu

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p ${BUILD_DIR} ${BUILD_DIR}_not_strip ${TEST_DIR}
          cp src/{keymaker-cli,keymakerd,qt/keymaker-qt} ${BUILD_DIR}/
          mv src/{keymaker-cli,keymakerd,qt/keymaker-qt} ${BUILD_DIR}_not_strip/
          mv src/test/test_keymaker ${TEST_DIR}
          strip ${BUILD_DIR}/*

      - name: Build Debug Binaries
        run: |
          make clean
          make distclean
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu --disable-tests --enable-debug --enable-crash-hooks
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}_debug
          mv src/{keymaker-cli,keymakerd,qt/keymaker-qt} ${BUILD_DIR}_debug/

      - name: Generate Checksum and Compress
        run: |
          mkdir -p ${COMPRESS_DIR}
          cd ${BUILD_DIR}
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu20-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_debug
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu20-debug-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_not_strip
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu20-not_strip-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ..
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-ubuntu20-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu20-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu20-not_strip-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-not_strip-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-${{ needs.get-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-test-${{ needs.get-version.outputs.version }}
          path: ${{ env.TEST_DIR }}

  build-ubuntu22:
    name: Ubuntu 22 Build
    needs: get-version
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get install curl libcurl4-openssl-dev build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake -y

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          gcc --version
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j$(nproc)  HOST=x86_64-pc-linux-gnu

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu
        # TODO: @Jami - this line was from malbit, I think we may not need it but could you help confirm?
        # CONFIG_SITE=$PWD/depends/x86_64-pc-linux-gnu/share/config.site ./configure

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p ${BUILD_DIR} ${BUILD_DIR}_not_strip ${TEST_DIR}
          cp src/{keymaker-cli,keymakerd,qt/keymaker-qt} ${BUILD_DIR}/
          mv src/{keymaker-cli,keymakerd,qt/keymaker-qt} ${BUILD_DIR}_not_strip/
          mv src/test/test_keymaker ${TEST_DIR}
          strip ${BUILD_DIR}/*

      - name: Build Debug Binaries
        run: |
          make clean
          make distclean
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu --disable-tests --enable-debug --enable-crash-hooks
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}_debug
          mv src/{keymaker-cli,keymakerd,qt/keymaker-qt} ${BUILD_DIR}_debug/

      - name: Generate Checksum and Compress
        run: |
          mkdir -p ${COMPRESS_DIR}
          cd ${BUILD_DIR}
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_debug
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-debug-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_not_strip
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-not_strip-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ..
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu22-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu22-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-not_strip-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu22-not_strip-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-${{ needs.get-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-test-${{ needs.get-version.outputs.version }}
          path: ${{ env.TEST_DIR }}


  # build-arm-32:
  #   name: ARM 32-bit Build
  #   needs: get-version
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Install Required Packages
  #       run: |
  #         sudo apt-get update -y
  #         sudo apt-get upgrade -y
  #         sudo apt-get install curl build-essential libtool g++-arm-linux-gnueabihf autotools-dev automake pkg-config python3 bsdmainutils cmake

  #     - name: Build Depends
  #       run: |
  #         echo "building with $(nproc) threads"
  #         make -C depends -j$(nproc) HOST=arm-linux-gnueabihf

  #     - name: Configure
  #       run: |
  #         ./autogen.sh
  #         ./configure --prefix=`pwd`/depends/arm-linux-gnueabihf

  #     - name: Build Binaries
  #       run: |
  #         make -j$(nproc)
  #         mkdir -p ${BUILD_DIR} ${TEST_DIR}
  #         mv src/{keymaker-cli,keymakerd,qt/keymaker-qt} ${BUILD_DIR}/
  #         mv src/test/test_keymaker ${TEST_DIR}

  #     - name: Build Debug Binaries
  #       run: |
  #         make clean
  #         make distclean
  #         ./autogen.sh
  #         ./configure --prefix=`pwd`/depends/arm-linux-gnueabihf --disable-tests --enable-debug
  #         make -j$(nproc)
  #         mkdir -p ${BUILD_DIR}_debug
  #         mv src/{keymaker-cli,keymakerd,qt/keymaker-qt} ${BUILD_DIR}_debug/

  #     - name: Generate Checksum and Compress
  #       run: |
  #         mkdir -p ${COMPRESS_DIR}
  #         cd ${BUILD_DIR}
  #         echo "sha256:" >> checksums.txt
  #         echo "------------------------------------" >> checksums.txt
  #         shasum * >> checksums.txt
  #         echo "------------------------------------" >> checksums.txt
  #         echo "openssl-sha256:" >> checksums.txt
  #         echo "------------------------------------" >> checksums.txt
  #         sha256sum * >> checksums.txt
  #         cat checksums.txt
  #         tar -cvzf ../${COIN_NAME}-arm32-${{ needs.get-version.outputs.version }}.tar.gz *
  #         cd ../${BUILD_DIR}_debug
  #         echo "sha256:" >> checksums.txt
  #         echo "------------------------------------" >> checksums.txt
  #         shasum * >> checksums.txt
  #         echo "------------------------------------" >> checksums.txt
  #         echo "openssl-sha256:" >> checksums.txt
  #         echo "------------------------------------" >> checksums.txt
  #         sha256sum * >> checksums.txt
  #         cat checksums.txt
  #         tar -cvzf ../${COIN_NAME}-arm32-debug-${{ needs.get-version.outputs.version }}.tar.gz *
  #         cd ..
  #         mv *.tar.gz ${COMPRESS_DIR}/
  #         cd ${COMPRESS_DIR}
  #         echo "sha256: `shasum ${COIN_NAME}-arm32-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
  #         echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm32-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
  #         echo "sha256: `shasum ${COIN_NAME}-arm32-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
  #         echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm32-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
  #         cd ..
  #         cat ${COMPRESS_DIR}/checksums.txt

  #     - name: Upload Artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ env.COIN_NAME }}-arm32-${{ needs.get-version.outputs.version }}
  #         path: ${{ env.COMPRESS_DIR }}

  #     - name: Upload Test Artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ env.COIN_NAME }}-arm32-test-${{ needs.get-version.outputs.version }}
  #         path: ${{ env.TEST_DIR }}

 
  build-arm-64:
    name: ARM 64-bit Build
    needs: get-version
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get install curl libcurl4-openssl-dev build-essential libtool g++-aarch64-linux-gnu autotools-dev automake pkg-config python3 bsdmainutils cmake -y

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j$(nproc) HOST=aarch64-linux-gnu

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/aarch64-linux-gnu

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p ${BUILD_DIR} ${TEST_DIR}
          mv src/{keymaker-cli,keymakerd,qt/keymaker-qt} ${BUILD_DIR}/
          mv src/test/test_keymaker ${TEST_DIR}/

      - name: Build Debug Binaries
        run: |
          make clean
          make distclean
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/aarch64-linux-gnu --disable-tests --enable-debug --enable-crash-hooks
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}_debug
          mv src/{keymaker-cli,keymakerd,qt/keymaker-qt} ${BUILD_DIR}_debug/

      - name: Generate Checksum and Compress
        run: |
          mkdir -p ${COMPRESS_DIR}
          cd ${BUILD_DIR}
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-arm64-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_debug
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-arm64-debug-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ..
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-arm64-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm64-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-arm64-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm64-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-arm64-${{ needs.get-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-arm64-test-${{ needs.get-version.outputs.version }}
          path: ${{ env.TEST_DIR }}

name: Keymaker Build Win64
on:
  push:
    branches:
      - master
      - develop
      - "ft/*"
      - "bug/*"
      - "release/*"
  pull_request:
    branches:
      - develop
  workflow_dispatch:

env:
  COIN_NAME: keymaker
  BUILD_DIR: keymaker-build
  COMPRESS_DIR: keymaker-compress
  TEST_DIR: keymaker-test

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Triggered By
        run: |
          echo "checking out $GITHUB_REF triggered by $GITHUB_EVENT_NAME"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Read versions
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: "release-version candidate-version snapshot-version"

      - name: Choose version
        id: selected-version
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]] || [[ "$GITHUB_REF" == *ft/* ]] || [[ "$GITHUB_REF" == *bug/* ]]; then
              version=${{ steps.versions.outputs.snapshot-version }}
          elif [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] && [[ "$GITHUB_REF" == *"release/"* ]]; then
              version=${{ steps.versions.outputs.candidate-version }}
          elif [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] && [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
              version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version is: [$version]"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: version.txt

    outputs:
      version: ${{ steps.selected-version.outputs.version }}
 
  build-win64:
    name: Win64 Build
    needs: get-version
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get install curl libcurl4-openssl-dev build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake -y
          sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 nsis
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j$(nproc) HOST=x86_64-w64-mingw32

      - name: Configure
        run: |
          ./autogen.sh
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32
        #  CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p ${BUILD_DIR} ${BUILD_DIR}_not_strip ${TEST_DIR}
          cp src/{keymaker-cli.exe,keymakerd.exe,qt/keymaker-qt.exe} ${BUILD_DIR}/
          mv src/{keymaker-cli.exe,keymakerd.exe,qt/keymaker-qt.exe} ${BUILD_DIR}_not_strip/
          mv src/test/test_keymaker.exe ${TEST_DIR}
          strip ${BUILD_DIR}/*

      - name: Generate Checksum and Compress
        run: |
          cd ${BUILD_DIR}
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          zip -r ../${COIN_NAME}-win-${{ needs.get-version.outputs.version }}.zip .
          cd ../${BUILD_DIR}_not_strip
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          zip -r ../${COIN_NAME}-win-not_strip-${{ needs.get-version.outputs.version }}.zip .
          cd ..
          mkdir -p ${COMPRESS_DIR}
          mv *.zip ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256:         `shasum    ${COIN_NAME}-win-${{ needs.get-version.outputs.version }}.zip`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-win-${{ needs.get-version.outputs.version }}.zip`" >> checksums.txt
          echo "sha256:         `shasum    ${COIN_NAME}-win-not_strip-${{ needs.get-version.outputs.version }}.zip`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-win-not_strip-${{ needs.get-version.outputs.version }}.zip`" >> checksums.txt
          cat checksums.txt
          cd ..

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-win-${{ needs.get-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-win-test-${{ needs.get-version.outputs.version }}
          path: ${{ env.TEST_DIR }}

      - name: Generate window installation file
        run: |
          make deploy
          mkdir win64-installation
          mv *.exe win64-installation/
          cd win64-installation
          echo "sha256: `shasum *.exe`" >> checksums.txt
          echo "openssl-sha25: `sha256sum *.exe`" >> checksums.txt
          cd ..

      - name: Upload Win64 installation file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-win-installation-${{ needs.get-version.outputs.version }}
          path: win64-installation
